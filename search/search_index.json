{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"CHBH Computing on Bear","text":"<p>This page collects tutorials and examples for neuroimaging analyses to run on BlueBEAR. This is intended to extend the main Bear Technical Documentation pages.</p>"},{"location":"#getting-started","title":"Getting Started","text":""},{"location":"#contributing","title":"Contributing","text":"<p>This page is a work-in-progress! Contributions from github PRs or by emailing Andrew...</p>"},{"location":"bear/","title":"Getting started on BEAR","text":"<p>This page collects tutorials and examples for neuroimaging analyses to run on BlueBEAR. This is intended to extend the main Bear Technical Documentation pages.</p> <p>Here we provide a set of links, tips and tricks for getting started. Mostly linking out to other places.</p>"},{"location":"bear/#step-0-linux","title":"Step 0: Linux","text":"<p>Bear provide a Introduction to Linux guide. Many computing services on bear rely on linux. There are in-person workshops and an online canvas courses available on this page.</p>"},{"location":"bear/#step-1-bluebear","title":"Step 1: BlueBEAR","text":"<p>Bear also provide a Introduction to BlueBEAR course. There are in person workshops and an online canvas course.</p>"},{"location":"bear/#step-2-rds-projects","title":"Step 2: RDS Projects","text":"<p>You'll need to be a member of a Bear project and have a Bear linux account to use BlueBEAR. Your PI and lab can help with this. A detailed guide for accessing BEAR is provided on the technical docs.</p>"},{"location":"bear/#step-3-bear-portal","title":"Step 3: Bear Portal","text":"<p>BEAR Portal  provides web-based access to a range of BEAR services, such as JupyterLab, RStudio, and various other GUI applications. BEAR Portal is only available on campus or using the University Remote Access Service.</p>"},{"location":"bear/#step-4-launching-interactive-sessions","title":"Step 4: Launching interactive sessions","text":"<p>From BEAR Portal there are three options for launching an interactive analysis session.</p> <ul> <li> <p>Some software packages have GUI Apps  installed on BlueBEAR that can be launched from the Bear Portal - the main example for neuroimaging analysis is Matlab.</p> </li> <li> <p>JupyterLab and RStudio are installed as standalone apps that can be launched from BEAR Portal. (ote that only packages installed on Bear Apps are available to load in JupyterLab).</p> </li> <li> <p>A complete Linux Desktop can be launched as the BlueBEAR GUI. BlueBEAR GUI is effectively a blank-slate linux desktop, into which you can load the modules for various applications, specify environment variables etc. by using the built-in Terminal client (see image below), and then ultimately launch the interface for the application that you require.</p> </li> </ul>"},{"location":"bear/#step-5-running-cluster-jobs-with-slurm","title":"Step 5: Running cluster jobs with Slurm","text":"<p>There are two ways to submit a cluster job - the bluebear terminal or the Bear Portal</p> <p>https://docs.bear.bham.ac.uk/bluebear/jobs/ https://docs.bear.bham.ac.uk/portal/jobs/</p>"},{"location":"bear/#step-6-neuroimaging-analysis-software-on-bear","title":"Step 6: Neuroimaging analysis software on Bear","text":"<p>The following software is available on BlueBEAR.</p> Toolbox GUI App Bear Apps Modules Notes FSL N/A Bear Apps FSL Pip install modules via venv Python JupyterLab Bear Apps Python Bear Apps or pip/venv MNE-Python JupyterLab Bear Apps MNE Bear Apps or pip/venv Matlab MatLab Bear Apps MatLab Fieldtrip MatLab None Load within MatLab script EEGLab MatLab None Load within MatLab script SPM MatLab None Load within MatLab script R Rstudio Bear Apps R Freesurfer N/A Bear Apps Freesurfer"},{"location":"home/","title":"CHBH Computing on Bear","text":"<p>This page collects tutorials and examples for neuroimaging analyses to run on BlueBEAR. This is intended to extend the main Bear Technical Documentation pages.</p>"},{"location":"home/#getting-started","title":"Getting Started","text":""},{"location":"home/#contributing","title":"Contributing","text":"<p>This page is a work-in-progress! Contributions from github PRs or by emailing Andrew...</p>"},{"location":"R/R/","title":"R for statistical computing","text":"<p>The R project is a free software environment for statistical computing and graphics.</p>"},{"location":"R/R/#r-versions","title":"R Versions","text":"<p>Bear Apps has several versions of MNE-Python as loadable modules.</p>"},{"location":"R/R/#r-studio-gui-app","title":"R-Studio GUI App","text":"<p>RStudio is an integrated development environment (IDE) for R. It includes a console, syntax-highlighting editor that supports direct code execution, and tools for plotting, history, debugging, and workspace management.</p> <p>You can open an interactive RStudio session through the Bear Portal. The pre-installed R versions can be loaded.</p>"},{"location":"R/R/#neuroimaging-specific-r-packages","title":"Neuroimaging specific R packages","text":"<p>Here is a list of R packages commonly used for neuroimaging analysis.</p>"},{"location":"R/R/#fslr","title":"FSLR","text":"<p>Wrapper functions that interface with 'FSL' , a powerful and commonly-used 'neuroimaging' software, using system commands.</p>"},{"location":"R/R/#r-example-for-bear","title":"R Example for BEAR","text":"<pre><code>knitr::opts_chunk$set(echo = TRUE)\nlibrary(ggplot2)\n\n# Simulate some data\ntime     &lt;- 0:99\nset.seed(1)\nnoise    &lt;- rnorm(100)\ndisorder &lt;- time * 4 + 100 + noise * 20\ndis_df   &lt;- data.frame(time, disorder)\n\n# Create a plot\nggplot(dis_df, aes(x = time, y = disorder)) + geom_point() +\n  geom_smooth(method = \"lm\")\n\n# Fit model\nlm_fit &lt;- lm(disorder ~ time, dis_df)\nsummary(lm_fit)\n</code></pre>"},{"location":"containers/containers/","title":"Containers","text":"<p>A container is a lightweight software package that contains both the software, and all of the required dependencies to run the contained software.</p> <p>BlueBEAR supports running analyses on containers using Apptainer. The Bear Technical docs contain extensive tutorals</p> <p>Note</p> <p>BlueBEAR does not directly support Docker as it requires administratr privalages to run. Apptainer is able to read and execute Docker images without admin rights. Apptainer is the successor to the Singularty project - please see this article for more information on the transition.</p>"},{"location":"containers/containers/#downloading-a-container","title":"Downloading a Container","text":"<p>Docker has a wide selection of containers available to download. Bear Technical docs contains some examples on how to download and execute a simple python container.</p> <p>The following bash code provides an example of how to download the fMRIPrep container, which includes a variety of neuroimaging software, including freesurfer, FSL, and ANTS. This can be run on a terminal in the Bear GUI.</p> <pre><code>singularity pull --name fMRIPrep.sif docker://nipreps/fmriprep:latest\n</code></pre> <p>and this version can be submitted as a cluster script.</p> <pre><code>#!/bin/bash\n#SBATCH --account bagshaap-eeg-fmri-hmm\n#SBATCH --qos bbdefault\n#SBATCH --time 60\n#SBATCH --nodes 1 # ensure the job runs on a single node\n#SBATCH --ntasks 10 # this will give you circa 40G RAM and will ensure faster conversion to the .sif format\n#SBATCH --constraint icelake\nset -e\n\nsingularity pull --name fMRIPrep.sif docker://nipreps/fmriprep:latest\n</code></pre>"},{"location":"containers/containers/#running-software-using-a-container","title":"Running Software using a Container","text":"<p>The <code>singularity exec</code> command is used to run the contained software. The following bash codes demonstrates how to run the FSL command <code>fslroi</code> contained within the fMRIPrep container.</p> <pre><code>#!/bin/bash\n#SBATCH --account bagshaap-eeg-fmri-hmm\n#SBATCH --qos bbdefault\nmodule purge; module load bluebear\n\nsingularity exec fMRIPrep.sif fslroi --help\n</code></pre>"},{"location":"fsl/fsl/","title":"FSL","text":"<p>FSL is a comprehensive library of analysis tools for FMRI, MRI and DTI brain imaging data.</p>"},{"location":"fsl/fsl/#fsl-modules","title":"FSL Modules","text":"<p>A range of installed FSL versions are available as modules on Bear Apps.</p>"},{"location":"fsl/fsl/#bear-portal-gui","title":"Bear Portal GUI","text":"<p>The following code snippet can be executed in a terminal from within the Bear Portal GUI. It will load a pre-installed FSL version into the terminal where is can be used as normal.</p> <pre><code>module load FSL/6.0.5.1-foss-2021a-fslpython\n</code></pre> <p>We can then use FSL command line functions as normal.</p> <pre><code>fsl_anat --help\n</code></pre>"},{"location":"fsl/fsl/#submitting-fsl-jobs","title":"Submitting FSL Jobs","text":"<pre><code>#!/bin/bash\n#SBATCH --ntasks 1\n#SBATCH --time 30:0\n#SBATCH --mem 50G\n#SBATCH --qos bbdefault\n#SBATCH --array=1-48\nset -eu\n\nmodule purge; module load bluebear\nmodule load MATLAB/2019b  # load the MATLAB version you need\n# apply matlab script to each index in the array (here, the MATLAB script is programmed such that the input ID is used as the subject ID)\nmatlab -nodisplay -r \"run /rds/homes/d/dueckerk/startup.m, e1_fun_ICA(${SLURM_ARRAY_TASK_ID}), quit\"\n</code></pre>"},{"location":"matlab/fieldtrip/","title":"Fieldtrip on Slurm","text":"<p>Example contributed by Ben Griffiths.</p> <p>This is an example script running a fieldtrip analysis on EEG data acqurired during a visual flicker task.</p> <p>The data is read in, filtered, epoched, ICA'd, re-referenced, then plotted. The core function can be executed on the MatLab GUI App during an interactive session, or submitted to BlueEBAR using the bash script below.</p> <pre><code>%% Basic Preprocessing\n% A script to demonstrate how one can (superficially) preprocessing EEG\n% data using Fieldtrip, Matlab and BlueBEAR.\n%\n% Benjamin J. Griffiths (b.griffiths.1 [at] bham.ac.uk)\n% 28th March 2023\n%% Prepare Workspace\n% define root directory where data is stored\nroot_dir = '/rds/projects/g/griffibz-example-project/msc-eeg-23/';\n% add fieldtrip to path\naddpath('/rds/projects/g/griffibz-example-project/fieldtrip/')\nft_defaults\n% define participant number\nsubj = 1;\n%% Filter Raw Data\n% load data\ncfg         = [];\ncfg.dataset = sprintf('%s/bids/sub-%02.0f/eeg/sub-%02.0f_task-eeg-flicker_eeg.eeg', root_dir, subj, subj); % dynamically determine dataset name\ndata        = ft_preprocessing(cfg);\n% remove external and trigger channels\ncfg         = [];\ncfg.channel = {'all', '-EX*', '-Status'}; % select all channels except any external (-EX*) or trigger (-Status) channel\ndata        = ft_selectdata(cfg, data);\n% filter data\ncfg             = [];\n%cfg.hpfilter    = 'yes';   % apply high-pass filter\n%cfg.hpfreq      = 0.8;     % use high-pass to suppress frequencies &lt; 0.8Hz\ncfg.lpfilter    = 'yes';   % apply low-pass filter\ncfg.lpfreq      = 120;     % use low-pass to suppress frequencies &gt; 120Hz\ncfg.bsfilter    = 'yes';   % apply band-pass filter\ncfg.bsfreq      = [49 51]; % use band-pass to suppress frequencies netween 49Hz and 51Hz\ndata            = ft_preprocessing(cfg, data);\n%% Epoch Data\n% load in BIDS event file\nevents = readtable(sprintf('%s/bids/sub-%02.0f/eeg/sub-%02.0f_task-eeg-flicker_events.tsv', root_dir, subj, subj),'Filetype','text'); % dynamically determine dataset name\n% define Fieldtrip-style event structure\ntrl_start = -2; % start trial 2 seconds before trigger\ntrl_end = 4; % end trial 4 seconds after trigger\ntrl_def(:,1) = events.sample + (trl_start * data.fsample); % define samples to start trial\ntrl_def(:,2) = events.sample + (trl_end * data.fsample); % define samples to end trial\ntrl_def(:,3) = trl_start * data.fsample; % define when time = 0 occurs relative to start of trial\n% epoch data\ncfg = [];\ncfg.trl = trl_def;\ndata = ft_redefinetrial(cfg, data);\n% load in trialinfo\nload(sprintf('%s/bids/sourcedata/sub-%02.0f_trialinfo.mat', root_dir, subj))\ndata.trialinfo = trialinfo; % add trialinfo to data structure\n% tidy workspace\nclear events trl_start trl_end trl_def trialinfo\n%% Run ICA\n% restrict to retrieval trials\ncfg         = [];\ncfg.trials  = find(cellfun(@(x) strcmpi(x.trl_type, 'retrieval'), data.trialinfo));\ndata        = ft_selectdata(cfg, data);\n% reduce sample rate\ncfg = [];\ncfg.resamplefs = 256; % drop sample rate from 1024Hz to 256Hz\ndata = ft_resampledata(cfg, data);\n% run ica\nrng(subj) % set random seed to ensure reproducible outputs every time the function is run\nica = ft_componentanalysis([], data); % \"cfg\" need not be defined if using default settings\n% visualise first 20 components (commented to stop execution when running via Slurm)\n%ft_topoplotIC(struct('component',1:20,'layout','biosemi128.lay'), ica)\n% remove components\ncfg             = [];\ncfg.component   = [1 3]; % 1 = eyeblink, 3 = saccade\ndata            = ft_rejectcomponent(cfg, ica);\n%% Re-reference Data\n% re-reference to the average of all channels\ncfg = [];\ncfg.reref = 'yes';\ncfg.refchannel = 'all';\ndata = ft_preprocessing(cfg, data);\n%% Plot Results\n% get timelocked average of data\ncfg = [];\ncfg.channel = 'A*'; % restrict to posterior quadrant of channels\ntml = ft_timelockanalysis(cfg, data);\n% baseline correct timelocked average\ncfg = [];\ncfg.baseline = [-0.25 -0.05]; % set baseline as -250ms to -50ms\ntml = ft_timelockbaseline(cfg, tml);\n% plot ERP\nh = figure;\nsubplot(2,1,1); hold on\nplot(tml.time, mean(tml.avg))\nxlim([-0.5 2.5])\nxline(0,'k--')\nyline(0,'k-')\nxlabel('Time (s)')\nylabel('Amplitude (uV)')\ntitle('Visual Evoked Potential')\n% cycle through trials\npow = cell(8, 1); % create empty cells for eight conditions\nfor trl = 1 : numel(data.trial)\ncondition = data.trialinfo{trl}.ret_freq; % determine flicker condition\nchannels_A = cellfun(@(x) strncmpi(x, 'A', 1), data.label); % identify posterior channels\nsignal = data.trial{trl}(channels_A, :); % extract signal over posterior channels\npow{condition}(end+1,:) = mean(abs(fft(signal')')); % compute FFT\nend\n% determine frequencies of FFT\nfreqs = linspace(0, data.fsample, size(pow{1},2));\n% plot FFT for each condition\nsubplot(2,1,2); hold on\nfor condition = 1 : numel(pow)\nplot(freqs,mean(pow{condition}));\nend\nxlim([6, 42])\nylim([0, 700])\ntitle('Power Spectrum')\nxlabel('Frequency (Hz)')\nylabel('Power (arb. units)')\nlegend({'60Hz','40Hz','30Hz','24Hz','20Hz','17.1Hz','15Hz','Baseline'})\n% save figure in root directory\nsaveas(h, sprintf('%s/basic_preproc_output.jpg', root_dir))\n</code></pre> <pre><code>#!/bin/bash\n#SBATCH --ntasks 10\n#SBATCH --nodes 1\n#SBATCH --time 1:0:0\n#SBATCH --qos bbdefault\n#SBATCH --mail-type ALL\nset -e\n\nmodule purge; module load bluebear\nmodule load MATLAB/2021b\n\nmatlab -nodisplay -r \"basic_preprocessing; exit;\"\n</code></pre>"},{"location":"matlab/matlab/","title":"MatLab","text":"<p>Interactive MatLab sessions run as a GUI App accessible from the Bear Portal. Please follow the information on the Bear Technical Docs to start up an interactive MatLab session.</p> <p>Some parallelisation is available through parfor loops within single MatLab but users looking for to run many individual matlab scripts in parallel are likely to want to use the Slurm job submissions. Examples of both are included below.</p>"},{"location":"matlab/matlab/#neuroimaging-toolboxes","title":"Neuroimaging toolboxes","text":"<p>Neuroimaging toolboxes can be added to the MatLab path on BlueBEAR in the normal way. Toolboxes can be downloaded from the developer and stored on an RDS space. These folders can be added to the path within a MatLab session using <code>addpath</code>.</p> <pre><code>addpath(genpath('/rds/q/quinna-example-project/code/fieldtrip'))\n</code></pre> <p>These pages include some specific examples using popular MatLab toolboxes</p> <ul> <li>Fieldtrip</li> <li>EEGLab</li> <li>SPM</li> </ul>"},{"location":"matlab/matlab/#parallel-for-loop","title":"Parallel for-loop","text":"<p>Info</p> <p>Example contributed by Arkady Konovalov</p> <p>Simple parallelisation of a for-loop can be performed using parfor. This functionality is provided by MatLab and enables faster processing of <code>for</code> loops simply by changing the syntax at the start to say <code>parfor</code> rather than <code>for</code>.</p> <p>Here is an example function which makes use of <code>parfor</code> whilst computing GLMs using SPM.</p> <pre><code>function glm_level1(model)\n% This function takes a model structure as input and performs first-level\n% estimations in a General Linear Model (GLM) analysis for a set of subjects.\nsubjects = model.Subj;\n% FIRST LEVEL (individual) estimations\n% Get the number of subjects to be processed.\nN = size(subjects,2);\n% Iterate over each subject in \"subjects\" using parallel processing\nparfor i = 1:N\n% Get the current subject ID from \"subjects\"\nid = subjects(i);\n% Get the corresponding BIDS (Brain Imaging Data Structure) ID and\n% session information for the current subject.\nBIDS_id = model.ids{id};\nBIDS_sess = model.sess{id};\n% Construct the path to the GLM folder for the current subject.\npath = [model.glmfolder BIDS_id];\n% Construct the path to the SPM.mat file for the current subject.\nmodelfile = [path '/SPM.mat'];\n% Delete the existing SPM.mat file for the current subject (clean\n% up previously done models)\ndelete(modelfile);\n% Create a job structure for the current subject.\njob = analysis_job_func(BIDS_id, BIDS_sess, model);\n% Create an empty cell array to be used as inputs for the \"spm_jobman\" function.\ninputs = cell(0,1);\n% Set the SPM defaults to 'FMRI'.\nspm('defaults', 'FMRI');\n% Run the current job using the \"spm_jobman\" function.\nspm_jobman('run', job, inputs{:});\nend\nend\n</code></pre> <p>Note</p> <p>Make sure you specify the appropriate number of cores when starting the MatLab GUI App, you may not notice a substantial speed-up if you run MatLab using the default of 4 cores. Do try to avoid asking for substantially more than you might need however - BlueBEAR is a shared resource.</p>"},{"location":"matlab/matlab/#submitting-matlab-jobs-with-parfor-to-bear","title":"Submitting Matlab jobs with parfor to Bear","text":"<p>Info</p> <p>Example contributed by Dagmar Fraser</p> <p>The following Matlab code performs some matrix calculations on simulated data. The inclusion of a <code>parfor</code> loop means that the code can take advantage of computers with multiple CPUs to accelerate processing.</p> <pre><code>tic\nn = 200;\nA= 500;\na = zeros(1,n);\nparfor i = 1:n\na(i) = max(abs(eig(rand(A))));\nend\ntoc\n</code></pre> <p>You can run this code in an interactive Matlab session, or save it as a script that can be executed on the big cluster. If we save this file as <code>parforDemo.m</code>, we can write a second 'submission' script to execute it on the cluster.</p> <pre><code>#!/bin/bash\n#SBATCH --ntasks 8\n#SBATCH --time 5:0\n#SBATCH --qos bbshort\n#SBATCH --mail-type ALL\nset -e\n\nmodule purge\nmodule load bluebear\nmodule load MATLAB/2020a\n\nmatlab -nodisplay -r parforDemo\n</code></pre> <p>If we save that second script as <code>RunMyCode.sh</code> it can be run using <code>sbatch RunMyCode.sh</code> on a terminal to send the job to the cluster.</p> <p>The <code>ntasks</code> line specifies we are looking to use 8 cores. The last line contains the filename we are sending to MATLAB to execute</p>"},{"location":"matlab/matlab/#submitting-multiple-matlab-jobs","title":"Submitting multiple MatLab jobs","text":"<p>Info</p> <p>Example contributed by Katharina Deucker</p> <p>The previous example submits a single Matlab job that uses <code>parfor</code> BlueBEAR, for larger analyses we may want to parallelise jobs across entire matlab instances. This can be done by submitting MatLab jobs to BEAR using Slurm. The BEAR Technical Docs contain a simple example on submitting a matlab job to bear.</p> <p>For neuroimaging analyses, you'll generally need to organise your scripts so that each part that you want to parallelise runs from a single function that takes a single ID as an argument. Here is a specific example that runs a function <code>e1_fun_ICA</code> on each of 48 datasets.</p> <pre><code>#!/bin/bash\n#SBATCH --ntasks 1\n#SBATCH --time 30:0\n#SBATCH --mem 50G\n#SBATCH --qos bbdefault\n#SBATCH --array=1-48\nset -eu\n\nmodule purge; module load bluebear\n\n# load the MATLAB version you need\nmodule load MATLAB/2019b\n\n# apply matlab script to each index in the array\n# (the MATLAB script is programmed such that the input ID is used as the subject ID)\nmatlab -nodisplay -r \"run /rds/homes/d/dueckerk/startup.m, e1_fun_ICA(${SLURM_ARRAY_TASK_ID}), quit\"\n</code></pre>"},{"location":"mne/mne/","title":"MNE Python","text":"<p>MNE-Python is a Python package for analysing electrophysiology (MEG, EEG, sEEG, ECoG, NIRS, etc) data.</p>"},{"location":"mne/mne/#mne-python-versions","title":"MNE-Python Versions","text":"<p>Bear Apps has several versions of MNE-Python as modules.</p>"},{"location":"mne/mne/#jupyterlab","title":"JupyterLab","text":"<p>Interactive python notebooks are available to run as a JupyterLab GUI App through the Bear Portal. The pre-installed MNE python versions can be loaded as modules in the notebook session.</p> <p>Only the pre-installed modules available in Bear Apps are installable in the JupyterLab GUI App.</p>"},{"location":"mne/mne/#bear-gui","title":"Bear GUI","text":"<p>The following bash loads mne version 1.3.1 and its dependencies.</p> <pre><code>module load bear-apps/2022a\nmodule load MNE-Python/1.3.1-foss-2022a\n</code></pre> <pre><code>#!/bin/bash\nmodule purge; module load bluebear\nmodule load bear-apps/2021a/live\nmodule load Python/3.9.5-GCCcore-10.3.0\nmodule load IPython/7.25.0-GCCcore-10.3.0\n\nexport VENV_DIR=\"${HOME}/virtual-environments\"\nexport VENV_PATH=\"${VENV_DIR}/osl-bigmeg-${BB_CPU}\"\n# Create master dir if necessary\nmkdir -p ${VENV_DIR}\necho ${VENV_PATH}\n# Check if virtual environment exists and create it if not\nif [[ ! -d ${VENV_PATH} ]]; then\npython3 -m venv --system-site-packages ${VENV_PATH}\nfi\n# Activate virtual environment\nsource ${VENV_PATH}/bin/activate\n\n# Any additional installations\npip install mne\n</code></pre>"}]}